<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lectures on COMP4601 Musings</title><link>/lectures/</link><description>Recent content in Lectures on COMP4601 Musings</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Andrew Wong (z5206677)</copyright><lastBuildDate>Wed, 20 Jul 2022 01:51:14 +0000</lastBuildDate><atom:link href="/lectures/index.xml" rel="self" type="application/rss+xml"/><item><title>Seminar: Reconfigurable Hardware</title><link>/lectures/seminar-reconfigurable-hardware/</link><pubDate>Wed, 20 Jul 2022 01:51:14 +0000</pubDate><guid>/lectures/seminar-reconfigurable-hardware/</guid><description/></item><item><title>Seminar: Reconfigurable Computing</title><link>/lectures/seminar-reconfigurable-computing/</link><pubDate>Wed, 20 Jul 2022 01:07:11 +0000</pubDate><guid>/lectures/seminar-reconfigurable-computing/</guid><description>ASICS are more performant, but have higher overall costs (ahem engineering design).</description></item><item><title>Seminar: FPGA Routing</title><link>/lectures/seminar-fpga-routing/</link><pubDate>Wed, 13 Jul 2022 02:49:53 +0000</pubDate><guid>/lectures/seminar-fpga-routing/</guid><description>FPGA Routing is a way of deciding the amount of area used by wire segments and programmable switches as compared to area consumed by logic blocks.</description></item><item><title>Seminar: Technology Mapping</title><link>/lectures/seminar-technology-mapping/</link><pubDate>Wed, 13 Jul 2022 02:27:34 +0000</pubDate><guid>/lectures/seminar-technology-mapping/</guid><description>Technology mapping is the process in which boolean logic is transformed into circuit components</description></item><item><title>Seminar: Architectural Synthesis</title><link>/lectures/seminar-architectural-synthesis/</link><pubDate>Wed, 13 Jul 2022 01:52:24 +0000</pubDate><guid>/lectures/seminar-architectural-synthesis/</guid><description>Scope State Machines Component Connectivity I/O Input Resources Constraints Sequencing Graph Output Source Schedule RTL Sequencing Graphs Node-like tree which describes the structure</description></item><item><title>Fast Fourier Transform</title><link>/lectures/fast-fourier-transform/</link><pubDate>Thu, 30 Jun 2022 11:49:25 +0000</pubDate><guid>/lectures/fast-fourier-transform/</guid><description>FFT exploits the symmetry to convert a calculation that original takes O(n^2) multiply, into an O(n log n) operation Divide and conquer on the symmetry of the matrix Understanding the Recursive Structure 2-point DFT Note the (-) sign next to G[1].</description></item><item><title>Discrete Fourier Transform</title><link>/lectures/discrete-fourier-transform/</link><pubDate>Thu, 30 Jun 2022 09:12:13 +0000</pubDate><guid>/lectures/discrete-fourier-transform/</guid><description>Represent a periodic signal as a sum of sinusoids Transforms a fixed number of signal samples (i.</description></item><item><title>CORDIC</title><link>/lectures/cordic/</link><pubDate>Mon, 20 Jun 2022 03:31:50 +0000</pubDate><guid>/lectures/cordic/</guid><description>https://www.</description></item><item><title>Bitwidth Optimisation</title><link>/lectures/bitwidth-optimisation/</link><pubDate>Wed, 08 Jun 2022 02:22:53 +0000</pubDate><guid>/lectures/bitwidth-optimisation/</guid><description>Smaller operations may require fewer clock cycles to execute Operations split into smaller operations can be parallelised If variables are 32 bits wide, then more primitive Boolean operations need to be performed than if they were 8 bits wide (consequently more resources are required)</description></item><item><title>Implications of Performance</title><link>/lectures/implications-of-performance/</link><pubDate>Wed, 08 Jun 2022 01:23:22 +0000</pubDate><guid>/lectures/implications-of-performance/</guid><description>There is no good rule to pick the optimal target clock frequency.</description></item><item><title>HLS</title><link>/lectures/hls/</link><pubDate>Wed, 01 Jun 2022 03:06:11 +0000</pubDate><guid>/lectures/hls/</guid><description>Example - FIR Filter A Finite Impulse Response filter performs a convolution on an input sequence with a fixed set of coefficients</description></item><item><title>Parellel Programming for FPGAs</title><link>/lectures/parellel-programming-for-fpgas/</link><pubDate>Wed, 01 Jun 2022 01:50:07 +0000</pubDate><guid>/lectures/parellel-programming-for-fpgas/</guid><description>VHDL and Verilog are used to specify design at RTL (register transfer level) RTL -&amp;gt; Logic that leads to a final value HLS (High-level Synthesis) allows for the generation of RTL designs through high level code (i.</description></item></channel></rss>